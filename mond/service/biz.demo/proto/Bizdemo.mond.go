// Code generated by protoc-gen-mond. DO NOT EDIT.
// source: proto/Bizdemo.proto

package Bizdemo

import (
	"context"
	"errors"
	"fmt"

	merr "github.com/tangbo/twatt/mond/wind/err"
	mgrpc "github.com/tangbo/twatt/mond/wind/grpc"
	"github.com/tangbo/twatt/mond/wind/config"
	"github.com/tangbo/twatt/mond/wind/env"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

var (
	_ merr.ErrorCode
)

type GrpcBizdemoServiceClient interface {
	Close() error
	Ping(ctx context.Context, req *PingReq) (*PingResp, error)
}

type grpcBizdemoServiceClient struct {
	client BizdemoServiceClient
	conn   *grpc.ClientConn
}

func (g *grpcBizdemoServiceClient) Ping(ctx context.Context, req *PingReq) (*PingResp, error) {
	return g.client.Ping(ctx, req)
}
func (m *grpcBizdemoServiceClient) Close() error {
	return m.conn.Close()
}

func GetGrpcBizdemoServiceClient() (GrpcBizdemoServiceClient, error) {
	if env.GetAppState() != env.Starting {
		return nil, errors.New("必须在服务初始化时加载grpc client")
	}
	opt := config.GetGrpcClientOption("Bizdemo")
	target := "meta://Bizdemo"
	loadBalancingPolicy := "meta"
	if opt.Scheme == "DNS" {
		target = opt.Endpoint
		loadBalancingPolicy = "round_robin"
	}
	options := []grpc.DialOption{
		grpc.WithTransportCredentials(insecure.NewCredentials()),

		grpc.WithDefaultServiceConfig(fmt.Sprintf(`{"loadBalancingPolicy":"%s"}`, loadBalancingPolicy)),

		grpc.WithChainUnaryInterceptor(mgrpc.ClientMiddleware(opt)...),
	}
	for _, v := range mgrpc.DefaultDialOptions {
		options = append(options, v)
	}
	conn, err := grpc.Dial(target, options...)
	if err != nil {
		return nil, err
	}
	client := NewBizdemoServiceClient(conn)
	return &grpcBizdemoServiceClient{client: client, conn: conn}, nil
}

type BizdemoServiceServerImpl struct {
	UnimplementedBizdemoServiceServer
	svc BizdemoServiceServer
}

func NewBizdemoServiceServerImpl(svc BizdemoServiceServer) *BizdemoServiceServerImpl {
	return &BizdemoServiceServerImpl{svc: svc}
}

func (m *BizdemoServiceServerImpl) Ping(ctx context.Context, req *PingReq) (*PingResp, error) {
	return m.svc.Ping(ctx, req)
}
